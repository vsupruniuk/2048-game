{"version":3,"sources":["components/GameCell/GameCell.tsx","components/GameRow/GameRow.tsx","utils/random.helpers.ts","components/GameField/GameField.tsx","hooks/useLoaclStorage.ts","components/StartScreen/StartScreen.tsx","App.tsx","index.tsx"],"names":["GameCell","React","memo","cell","className","classNames","GameRow","gameDataRow","map","index","getRandomIndex","Math","floor","random","getRandomValue","ceil","selectRandomLine","defaultGameData","GameField","useState","gameData","setGameData","pressedKey","setPressedKey","isGameWon","setIsGameWon","isGameLose","setIsGameLose","score","setScore","key","initialValue","JSON","parse","localStorage","getItem","value","setValue","newValue","setItem","stringify","useLocalStorage","bestScore","setBestScore","changePressedKey","useCallback","event","handleMoveDown","some","row","newGameData","isMoved","i","length","j","prevScore","randomLine","every","randomCellIndex","handleMoveUp","handleMoveRight","randomColumn","line","handleMoveLeft","useEffect","isMovesLeft","includes","document","removeEventListener","initialGameData","firstRandomCell","secondRandomCell","addEventListener","StartScreen","startGame","type","onClick","App","isGameStarted","setIsGameStarted","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ea0b2364.chunk.js","sourcesContent":["import React from 'react';\nimport './GameCell.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  cell: number\n};\n\nexport const GameCell: React.FC<Props> = React.memo(({ cell }) => {\n  return (\n    <div className={classNames(\n      'cell',\n      { 'cell--2': cell === 2 },\n      { 'cell--4': cell === 4 },\n      { 'cell--8': cell === 8 },\n      { 'cell--16': cell === 16 },\n      { 'cell--32': cell === 32 },\n      { 'cell--64': cell === 64 },\n      { 'cell--128': cell === 128 },\n      { 'cell--256': cell === 256 },\n      { 'cell--512': cell === 512 },\n      { 'cell--1024': cell === 1024 },\n      { 'cell--2048': cell === 2048 },\n    )}\n    >\n      {cell || ''}\n    </div>\n  );\n});\n","import React from 'react';\nimport './GameRow.scss';\nimport { GameCell } from '../GameCell';\n\ntype Props = {\n  gameDataRow: number[],\n};\n\nexport const GameRow: React.FC<Props> = ({ gameDataRow }) => {\n  return (\n    <div className=\"game-row\">\n      {gameDataRow.map((cell, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <GameCell key={index} cell={cell} />\n      ))}\n    </div>\n  );\n};\n","export const getRandomIndex = () => {\n  return Math.floor(Math.random() * 4);\n};\n\nexport const getRandomValue = () => {\n  const randomNumber = Math.ceil(Math.random() * 10);\n\n  return randomNumber === 10 ? 4 : 2;\n};\n\nexport const selectRandomLine = () => {\n  return Math.random();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { GameRow } from '../GameRow';\nimport './GameField.scss';\nimport { useLocalStorage } from '../../hooks/useLoaclStorage';\nimport {\n  getRandomIndex,\n  getRandomValue,\n  selectRandomLine,\n} from '../../utils/random.helpers';\n\nconst defaultGameData = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nexport const GameField: React.FC = React.memo(() => {\n  const [\n    gameData,\n    setGameData,\n  ] = useState<number[][]>(defaultGameData);\n  const [pressedKey, setPressedKey] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isGameLose, setIsGameLose] = useState(false);\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useLocalStorage('best score', 0);\n\n  const changePressedKey = useCallback((event: KeyboardEvent) => {\n    setPressedKey(event.key);\n  }, []);\n\n  const handleMoveDown = useCallback(() => {\n    if (gameData.some(row => row.some(cell => cell === 0)) || !isGameLose) {\n      const newGameData = [...gameData];\n      let isMoved = false;\n\n      for (let i = newGameData.length - 2; i >= 0; i -= 1) {\n        switch (i) {\n          case 2:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[3][j] !== 0\n                && newGameData[2][j] === newGameData[3][j]) {\n                newGameData[3][j] *= 2;\n                newGameData[2][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[3][j];\n                });\n                isMoved = true;\n              } else if (newGameData[3][j] === 0 && newGameData[2][j] !== 0) {\n                [newGameData[3][j], newGameData[2][j]]\n                  = [newGameData[2][j], newGameData[3][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          case 1:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[3][j] !== 0\n                && newGameData[1][j] === newGameData[3][j]\n                && newGameData[2][j] === 0) {\n                newGameData[3][j] *= 2;\n                newGameData[1][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[3][j];\n                });\n                isMoved = true;\n              } else if (newGameData[3][j] === 0 && newGameData[1][j] !== 0) {\n                [newGameData[3][j], newGameData[1][j]]\n                  = [newGameData[1][j], newGameData[3][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[2][j] !== 0\n                && newGameData[1][j] === newGameData[2][j]) {\n                newGameData[2][j] *= 2;\n                newGameData[1][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[2][j];\n                });\n                isMoved = true;\n              } else if (newGameData[2][j] === 0 && newGameData[1][j] !== 0) {\n                [newGameData[2][j], newGameData[1][j]]\n                  = [newGameData[1][j], newGameData[2][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          case 0:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[3][j] !== 0\n                && newGameData[0][j] === newGameData[3][j]\n                && newGameData[1][j] === 0\n                && newGameData[2][j] === 0) {\n                newGameData[3][j] *= 2;\n                newGameData[0][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[3][j];\n                });\n                isMoved = true;\n              } else if (newGameData[3][j] === 0 && newGameData[0][j] !== 0) {\n                [newGameData[3][j], newGameData[0][j]]\n                  = [newGameData[0][j], newGameData[3][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[2][j] !== 0\n                && newGameData[0][j] === newGameData[2][j]\n                && newGameData[1][j] === 0) {\n                newGameData[2][j] *= 2;\n                newGameData[0][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[2][j];\n                });\n                isMoved = true;\n              } else if (newGameData[2][j] === 0 && newGameData[0][j] !== 0) {\n                [newGameData[2][j], newGameData[0][j]]\n                  = [newGameData[0][j], newGameData[2][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[1][j] !== 0\n                && newGameData[0][j] === newGameData[1][j]) {\n                newGameData[1][j] *= 2;\n                newGameData[0][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[1][j];\n                });\n                isMoved = true;\n              } else if (newGameData[1][j] === 0 && newGameData[0][j] !== 0) {\n                [newGameData[1][j], newGameData[0][j]]\n                  = [newGameData[0][j], newGameData[1][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (isMoved) {\n        let randomLine = selectRandomLine() > 0.4 ? 0 : 1;\n\n        if (newGameData[1].every(cell => cell !== 0)) {\n          randomLine = 0;\n        }\n\n        let randomCellIndex = [randomLine, getRandomIndex()];\n\n        if (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n          while (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n            randomCellIndex = [randomLine, getRandomIndex()];\n          }\n        }\n\n        newGameData[randomCellIndex[0]][randomCellIndex[1]] = getRandomValue();\n      }\n\n      setGameData(newGameData);\n\n      setPressedKey('');\n    }\n  }, [gameData]);\n\n  const handleMoveUp = useCallback(() => {\n    if (gameData.some(row => row.some(cell => cell === 0)) || !isGameLose) {\n      const newGameData = [...gameData];\n      let isMoved = false;\n\n      for (let i = 0; i <= newGameData.length; i += 1) {\n        switch (i) {\n          case 1:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[0][j] !== 0\n                && newGameData[0][j] === newGameData[1][j]) {\n                newGameData[0][j] *= 2;\n                newGameData[1][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[0][j];\n                });\n                isMoved = true;\n              } else if (newGameData[0][j] === 0 && newGameData[1][j] !== 0) {\n                [newGameData[0][j], newGameData[1][j]]\n                  = [newGameData[1][j], newGameData[0][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          case 2:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[0][j] !== 0\n                && newGameData[0][j] === newGameData[2][j]\n                && newGameData[1][j] === 0) {\n                newGameData[0][j] *= 2;\n                newGameData[2][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[0][j];\n                });\n                isMoved = true;\n              } else if (newGameData[0][j] === 0 && newGameData[2][j] !== 0) {\n                [newGameData[0][j], newGameData[2][j]]\n                  = [newGameData[2][j], newGameData[0][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[1][j] !== 0\n                && newGameData[1][j] === newGameData[2][j]) {\n                newGameData[1][j] *= 2;\n                newGameData[2][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[1][j];\n                });\n                isMoved = true;\n              } else if (newGameData[1][j] === 0 && newGameData[2][j] !== 0) {\n                [newGameData[1][j], newGameData[2][j]]\n                  = [newGameData[2][j], newGameData[1][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          case 3:\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[0][j] !== 0\n                && newGameData[3][j] === newGameData[0][j]\n                && newGameData[1][j] === 0\n                && newGameData[2][j] === 0) {\n                newGameData[0][j] *= 2;\n                newGameData[3][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[0][j];\n                });\n                isMoved = true;\n              } else if (newGameData[0][j] === 0 && newGameData[3][j] !== 0) {\n                [newGameData[0][j], newGameData[3][j]]\n                  = [newGameData[3][j], newGameData[0][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[1][j] !== 0\n                && newGameData[1][j] === newGameData[3][j]\n                && newGameData[2][j] === 0) {\n                newGameData[1][j] *= 2;\n                newGameData[3][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[1][j];\n                });\n                isMoved = true;\n              } else if (newGameData[1][j] === 0 && newGameData[3][j] !== 0) {\n                [newGameData[1][j], newGameData[3][j]]\n                  = [newGameData[3][j], newGameData[1][j]];\n                isMoved = true;\n              }\n            }\n\n            for (let j = 0; j <= 3; j += 1) {\n              if (newGameData[2][j] !== 0\n                && newGameData[2][j] === newGameData[3][j]) {\n                newGameData[2][j] *= 2;\n                newGameData[3][j] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[2][j];\n                });\n                isMoved = true;\n              } else if (newGameData[2][j] === 0 && newGameData[3][j] !== 0) {\n                [newGameData[2][j], newGameData[3][j]]\n                  = [newGameData[3][j], newGameData[2][j]];\n                isMoved = true;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      if (isMoved) {\n        let randomLine = selectRandomLine() > 0.4 ? 3 : 2;\n\n        if (newGameData[2].every(cell => cell !== 0)) {\n          randomLine = 3;\n        }\n\n        let randomCellIndex = [randomLine, getRandomIndex()];\n\n        if (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n          while (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n            randomCellIndex = [randomLine, getRandomIndex()];\n          }\n        }\n\n        newGameData[randomCellIndex[0]][randomCellIndex[1]] = getRandomValue();\n      }\n\n      setGameData(newGameData);\n\n      setPressedKey('');\n    }\n  }, [gameData]);\n\n  const handleMoveRight = useCallback(() => {\n    if (gameData.some(row => row.some(cell => cell === 0)) || !isGameLose) {\n      const newGameData = [...gameData];\n      let isMoved = false;\n\n      for (let i = 0; i < newGameData.length; i += 1) {\n        for (let j = newGameData[i].length - 2; j >= 0; j -= 1) {\n          switch (j) {\n            case 2:\n              if (newGameData[i][3] !== 0\n                && newGameData[i][3] === newGameData[i][2]) {\n                newGameData[i][3] *= 2;\n                newGameData[i][2] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][3];\n                });\n                isMoved = true;\n              } else if (newGameData[i][3] === 0 && newGameData[i][2] !== 0) {\n                [newGameData[i][3], newGameData[i][2]]\n                  = [newGameData[i][2], newGameData[i][3]];\n                isMoved = true;\n              }\n\n              break;\n\n            case 1:\n              if (newGameData[i][3] !== 0\n                && newGameData[i][3] === newGameData[i][1]\n                && newGameData[i][2] === 0) {\n                newGameData[i][3] *= 2;\n                newGameData[i][1] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][3];\n                });\n                isMoved = true;\n              } else if (newGameData[i][3] === 0 && newGameData[i][1] !== 0) {\n                [newGameData[i][3], newGameData[i][1]]\n                  = [newGameData[i][1], newGameData[i][3]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][2] !== 0\n                && newGameData[i][2] === newGameData[i][1]) {\n                newGameData[i][2] *= 2;\n                newGameData[i][1] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][2];\n                });\n                isMoved = true;\n              } else if (newGameData[i][2] === 0 && newGameData[i][1] !== 0) {\n                [newGameData[i][2], newGameData[i][1]]\n                  = [newGameData[i][1], newGameData[i][2]];\n                isMoved = true;\n              }\n\n              break;\n\n            case 0:\n              if (newGameData[i][3] !== 0\n                && newGameData[i][3] === newGameData[i][0]\n                && newGameData[i][2] === 0\n                && newGameData[i][1] === 0) {\n                newGameData[i][3] *= 2;\n                newGameData[i][0] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][3];\n                });\n                isMoved = true;\n              } else if (newGameData[i][3] === 0 && newGameData[i][0] !== 0) {\n                [newGameData[i][3], newGameData[i][0]]\n                  = [newGameData[i][0], newGameData[i][3]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][2] !== 0\n                && newGameData[i][2] === newGameData[i][0]\n                && newGameData[i][1] === 0) {\n                newGameData[i][2] *= 2;\n                newGameData[i][0] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][2];\n                });\n                isMoved = true;\n              } else if (newGameData[i][2] === 0 && newGameData[i][0] !== 0) {\n                [newGameData[i][2], newGameData[i][0]]\n                  = [newGameData[i][0], newGameData[i][2]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][1] !== 0\n                && newGameData[i][1] === newGameData[i][0]) {\n                newGameData[i][1] *= 2;\n                newGameData[i][0] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][1];\n                });\n                isMoved = true;\n              } else if (newGameData[i][1] === 0 && newGameData[i][0] !== 0) {\n                [newGameData[i][1], newGameData[i][0]]\n                  = [newGameData[i][0], newGameData[i][1]];\n                isMoved = true;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n\n      if (isMoved) {\n        let randomColumn = selectRandomLine() > 0.4 ? 0 : 1;\n\n        if (newGameData.every(line => line[1] !== 0)) {\n          randomColumn = 0;\n        }\n\n        let randomCellIndex = [getRandomIndex(), randomColumn];\n\n        if (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n          while (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n            randomCellIndex = [getRandomIndex(), randomColumn];\n          }\n        }\n\n        newGameData[randomCellIndex[0]][randomCellIndex[1]] = getRandomValue();\n      }\n\n      setGameData(newGameData);\n\n      setPressedKey('');\n    }\n  }, [gameData]);\n\n  const handleMoveLeft = useCallback(() => {\n    if (gameData.some(row => row.some(cell => cell === 0)) || !isGameLose) {\n      const newGameData = [...gameData];\n      let isMoved = false;\n\n      for (let i = 0; i < newGameData.length; i += 1) {\n        for (let j = 1; j < newGameData[i].length; j += 1) {\n          switch (j) {\n            case 1:\n              if (newGameData[i][0] !== 0\n                && newGameData[i][0] === newGameData[i][1]) {\n                newGameData[i][0] *= 2;\n                newGameData[i][1] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][0];\n                });\n                isMoved = true;\n              } else if (newGameData[i][0] === 0 && newGameData[i][1] !== 0) {\n                [newGameData[i][0], newGameData[i][1]]\n                  = [newGameData[i][1], newGameData[i][0]];\n                isMoved = true;\n              }\n\n              break;\n\n            case 2:\n              if (newGameData[i][0] !== 0\n                && newGameData[i][0] === newGameData[i][2]\n                && newGameData[i][1] === 0) {\n                newGameData[i][0] *= 2;\n                newGameData[i][2] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][0];\n                });\n                isMoved = true;\n              } else if (newGameData[i][0] === 0 && newGameData[i][2] !== 0) {\n                [newGameData[i][0], newGameData[i][2]]\n                  = [newGameData[i][2], newGameData[i][0]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][1] !== 0\n                && newGameData[i][1] === newGameData[i][2]) {\n                newGameData[i][1] *= 2;\n                newGameData[i][2] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][1];\n                });\n                isMoved = true;\n              } else if (newGameData[i][1] === 0 && newGameData[i][2] !== 0) {\n                [newGameData[i][1], newGameData[i][2]]\n                  = [newGameData[i][2], newGameData[i][1]];\n                isMoved = true;\n              }\n\n              break;\n\n            case 3:\n              if (newGameData[i][0] !== 0\n                && newGameData[i][0] === newGameData[i][3]\n                && newGameData[i][2] === 0\n                && newGameData[i][1] === 0) {\n                newGameData[i][0] *= 2;\n                newGameData[i][3] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][0];\n                });\n                isMoved = true;\n              } else if (newGameData[i][0] === 0 && newGameData[i][3] !== 0) {\n                [newGameData[i][0], newGameData[i][3]]\n                  = [newGameData[i][3], newGameData[i][0]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][1] !== 0\n                && newGameData[i][1] === newGameData[i][3]\n                && newGameData[i][2] === 0) {\n                newGameData[i][1] *= 2;\n                newGameData[i][3] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][1];\n                });\n                isMoved = true;\n              } else if (newGameData[i][1] === 0 && newGameData[i][3] !== 0) {\n                [newGameData[i][1], newGameData[i][3]]\n                  = [newGameData[i][3], newGameData[i][1]];\n                isMoved = true;\n              }\n\n              if (newGameData[i][2] !== 0\n                && newGameData[i][2] === newGameData[i][3]) {\n                newGameData[i][2] *= 2;\n                newGameData[i][3] = 0;\n                setScore((prevScore) => {\n                  return prevScore + newGameData[i][2];\n                });\n                isMoved = true;\n              } else if (newGameData[i][2] === 0 && newGameData[i][3] !== 0) {\n                [newGameData[i][2], newGameData[i][3]]\n                  = [newGameData[i][3], newGameData[i][2]];\n                isMoved = true;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n\n      if (isMoved) {\n        let randomColumn = selectRandomLine() > 0.4 ? 3 : 2;\n\n        if (newGameData.every(line => line[2] !== 0)) {\n          randomColumn = 3;\n        }\n\n        let randomCellIndex = [getRandomIndex(), randomColumn];\n\n        if (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n          while (newGameData[randomCellIndex[0]][randomCellIndex[1]] !== 0) {\n            randomCellIndex = [getRandomIndex(), randomColumn];\n          }\n        }\n\n        newGameData[randomCellIndex[0]][randomCellIndex[1]] = getRandomValue();\n      }\n\n      setGameData(newGameData);\n\n      setPressedKey('');\n    }\n  }, [gameData]);\n\n  useEffect(() => {\n    if (score >= bestScore) {\n      setBestScore(score);\n    }\n  }, [score]);\n\n  useEffect(() => {\n    if (gameData.some(row => row.includes(2048))) {\n      setIsGameWon(true);\n    }\n\n    let isMovesLeft;\n\n    for (let i = 0; i < gameData.length; i += 1) {\n      for (let j = 0; j < gameData[i].length; j += 1) {\n        if (i === 0) {\n          if (j === 0) {\n            if (gameData[i][j] === gameData[i + 1][j]\n            || gameData[i][j] === gameData[i][j + 1]\n            || gameData[i + 1][j] === 0\n            || gameData[i][j + 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j === 3) {\n            if (gameData[i][j] === gameData[i + 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i + 1][j] === 0\n              || gameData[i][j - 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j > 0 && j < 3) {\n            if (gameData[i][j] === gameData[i + 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i][j] === gameData[i][j + 1]\n              || gameData[i + 1][j] === 0\n              || gameData[i][j + 1] === 0\n              || gameData[i][j - 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n        }\n\n        if (i === 3) {\n          if (j === 0) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i][j + 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i][j + 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j === 3) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i][j - 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j > 0 && j < 3) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i][j] === gameData[i][j + 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i][j - 1] === 0\n              || gameData[i][j + 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n        }\n\n        if (i > 0 && i < 3) {\n          if (j === 0) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i + 1][j]\n              || gameData[i][j] === gameData[i][j + 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i + 1][j] === 0\n              || gameData[i][j + 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j === 3) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i + 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i + 1][j] === 0\n              || gameData[i][j - 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n\n          if (j > 0 && j < 3) {\n            if (gameData[i][j] === gameData[i - 1][j]\n              || gameData[i][j] === gameData[i + 1][j]\n              || gameData[i][j] === gameData[i][j - 1]\n              || gameData[i][j] === gameData[i][j + 1]\n              || gameData[i - 1][j] === 0\n              || gameData[i + 1][j] === 0\n              || gameData[i][j - 1] === 0\n              || gameData[i][j + 1] === 0) {\n              isMovesLeft = true;\n            }\n          }\n        }\n      }\n    }\n\n    if (isMovesLeft) {\n      setIsGameLose(false);\n    } else {\n      setIsGameLose(true);\n      document.removeEventListener('keydown', changePressedKey);\n    }\n  }, [gameData]);\n\n  useEffect(() => {\n    const initialGameData = [...gameData];\n    const firstRandomCell = [getRandomIndex(), getRandomIndex()];\n    let secondRandomCell = [getRandomIndex(), getRandomIndex()];\n\n    if (firstRandomCell[0] === secondRandomCell[0]\n      && firstRandomCell[1] === secondRandomCell[1]) {\n      while (firstRandomCell[0] === secondRandomCell[0]\n      && firstRandomCell[1] === secondRandomCell[1]) {\n        secondRandomCell = [getRandomIndex(), getRandomIndex()];\n      }\n    }\n\n    initialGameData[firstRandomCell[0]][firstRandomCell[1]] = getRandomValue();\n    initialGameData[secondRandomCell[0]][secondRandomCell[1]]\n      = getRandomValue();\n\n    setGameData(initialGameData);\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', changePressedKey);\n\n    switch (pressedKey) {\n      case 'ArrowDown':\n        handleMoveDown();\n        break;\n\n      case 'ArrowUp':\n        handleMoveUp();\n        break;\n\n      case 'ArrowRight':\n        handleMoveRight();\n        break;\n\n      case 'ArrowLeft':\n        handleMoveLeft();\n        break;\n\n      default:\n        break;\n    }\n  }, [pressedKey]);\n\n  return (\n    <div className=\"game-field\">\n      <div className=\"game-field__score-container\">\n        <div className=\"game-field__score\">\n          <span>Score</span>\n          <span>{score}</span>\n        </div>\n\n        <div className=\"game-field__best-score\">\n          <span>Best score</span>\n          <span>{bestScore}</span>\n        </div>\n      </div>\n\n      <div className=\"game-field__game-board\">\n        {gameData.map((row, index) => (\n          <GameRow\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            gameDataRow={row}\n          />\n        ))}\n      </div>\n      <h1 className={classNames(\n        'game-field__winning-title',\n        { 'game-field__winning-title--active': isGameWon },\n      )}\n      >\n        Congratulation!!! You WIN!!!\n      </h1>\n\n      <h1 className={classNames(\n        'game-field__game-over-title',\n        { 'game-field__game-over-title--active': isGameLose },\n      )}\n      >\n        You lose :(\n      </h1>\n    </div>\n  );\n});\n","import { useState } from 'react';\r\n\r\nexport const useLocalStorage = (key: string, initialValue: number) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      return JSON.parse(`${localStorage.getItem(key)}`) || initialValue;\r\n    } catch {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const save = (newValue: number) => {\r\n    setValue(newValue);\r\n    localStorage.setItem(key, JSON.stringify(newValue));\r\n  };\r\n\r\n  return [value, save];\r\n};\r\n","import React from 'react';\nimport './StartScreen.scss';\n\ntype Props = {\n  startGame: () => void\n};\n\nexport const StartScreen: React.FC<Props> = React.memo(({ startGame }) => {\n  return (\n    <div className=\"start-screen\">\n      <h1 className=\"start-screen__title\">2048</h1>\n\n      <div className=\"start-screen__description\">\n        Join the tiles, get to\n        <b> 2048!</b>\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"start-screen__button\"\n        onClick={() => startGame()}\n      >\n        Start game\n      </button>\n\n      <div className=\"start-screen__instruction\">\n        <b>HOW TO PLAY: </b>\n        Use your\n        <b> arrow keys </b>\n        to move the tiles. Tiles with the same number\n        <b> merge into one </b>\n        when they touch. Add them up to reach\n        <b> 2048!</b>\n      </div>\n    </div>\n  );\n});\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { GameField } from './components/GameField';\nimport { StartScreen } from './components/StartScreen';\n\nconst App: React.FC = () => {\n  const [isGameStarted, setIsGameStarted] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {isGameStarted ? (\n        <GameField />\n      ) : (\n        <StartScreen\n          startGame={() => setIsGameStarted(true)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './main.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}